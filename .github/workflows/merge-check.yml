name: Merge Check

on:
  pull_request:
    types: [opened, synchronize, reopened, labeled, unlabeled]
    branches:
      - main
  pull_request_review:
    types: [submitted]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: write
  pull-requests: write
  checks: write
  statuses: write
  actions: write

jobs:
  check-and-merge:
    runs-on: ubuntu-latest
    steps:
      - name: Wait for Java CI build to complete
        id: wait_for_build
        uses: lewagon/wait-on-check-action@v1.3.1
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          check-name: 'build'
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          wait-interval: 5

      - name: Check if Java CI build passed
        id: check_java_ci
        if: ${{ steps.wait_for_build.outputs.check-status == 'success' }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: checks } = await github.rest.checks.listForRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.payload.pull_request.head.sha
            });
            
            const javaCICheck = checks.check_runs.find(check => check.name === 'build');
            
            if (!javaCICheck) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.pull_request.number,
                body: '‚ùå Java CI build not found. Please ensure the build is triggered and completed.'
              });
              core.setFailed('Java CI build not found');
              return;
            }
            
            if (javaCICheck.conclusion !== 'success') {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.pull_request.number,
                body: '‚ùå Java CI build failed. Build must pass before merging.'
              });
              core.setFailed('Java CI build must pass before merging');
              return;
            }
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body: '‚úÖ Java CI build passed successfully!'
            });

      - name: Check if PR is approved
        id: check_pr
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pull_number = context.payload.pull_request.number;
            
            const { data: reviews } = await github.rest.pulls.listReviews({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pull_number
            });
            
            const approved = reviews.some(review => review.state === 'APPROVED');
            
            if (!approved) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.pull_request.number,
                body: '‚ùå Pull request needs to be approved first.'
              });
              core.setFailed('Pull request needs to be approved first');
              return;
            }
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body: '‚úÖ Pull request approved.'
            });

      - name: Auto-merge if everything passes
        if: success()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            try {
              await github.rest.pulls.merge({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.payload.pull_request.number,
                merge_method: 'squash'
              });
              
              await github.rest.actions.createWorkflowDispatch({
                owner: context.repo.owner,
                repo: context.repo.repo,
                workflow_id: 'build-docker-image.yml',
                ref: 'main'
              });
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.pull_request.number,
                body: '‚úÖ PR merged successfully! üéâ Docker build workflow triggered.'
              });
            } catch (error) {
              core.setFailed(`Failed to merge PR: ${error.message}`);
            }