name: Merge Check

on:
  pull_request:
    types: [opened, synchronize, reopened, labeled, unlabeled]
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: write
  pull-requests: write
  checks: write
  statuses: write

jobs:
  check-and-merge:
    runs-on: ubuntu-latest
    needs: [wait-for-build]
    steps:
      - name: Check if PR is approved
        id: check_pr
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pull_number = context.payload.pull_request.number;
            
            const { data: reviews } = await github.rest.pulls.listReviews({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pull_number
            });
            
            const approved = reviews.some(review => review.state === 'APPROVED');
            
            if (!approved) {
              core.setFailed('Pull request needs to be approved first');
              return;
            }
            
            console.log('PR is approved ‚úì');

      - name: Update PR status
        if: always()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const isApproved = '${{ steps.check_pr.conclusion }}' === 'success';
            const status = isApproved ? 
              '‚úÖ All checks passed successfully!' : 
              '‚ùå Not all requirements are met. Check approvals.';
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body: status
            });

      - name: Auto-merge if everything passes
        if: success()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            try {
              await github.rest.pulls.merge({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.payload.pull_request.number,
                merge_method: 'squash'
              });
              console.log('PR merged successfully! üéâ');
            } catch (error) {
              core.setFailed(`Failed to merge PR: ${error.message}`);
            }

  wait-for-build:
    runs-on: ubuntu-latest
    steps:
      - name: Wait for Java CI build
        uses: lewagon/wait-on-check-action@v1.3.1
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          check-name: 'build'
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          wait-interval: 5