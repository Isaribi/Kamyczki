name: Merge Check

on:
  pull_request:
    types: [opened, synchronize, reopened, labeled, unlabeled]
    branches:
      - main

permissions:
  contents: write
  pull-requests: write
  checks: write
  statuses: write

jobs:
  check-and-merge:
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'pull_request' ||
      (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success')
    steps:
      - name: Check Java CI Status
        id: check_status
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const workflowName = 'Java CI';
            
            if (context.payload.workflow_run) {
              if (context.payload.workflow_run.name === workflowName && 
                  context.payload.workflow_run.conclusion === 'success') {
                console.log('Java CI workflow passed ‚úì');
                return;
              }
              core.setFailed('Java CI build must pass before merging');
              return;
            }
            
            const { data: workflows } = await github.rest.actions.listWorkflowRuns({
              owner: context.repo.owner,
              repo: context.repo.repo,
              event: 'pull_request',
              status: 'completed',
              head_sha: context.payload.pull_request.head.sha
            });
            
            const javaCIRun = workflows.workflow_runs.find(run => run.name === workflowName);
            
            if (!javaCIRun) {
              core.setFailed('No Java CI builds found');
              return;
            }
            
            if (javaCIRun.conclusion !== 'success') {
              core.setFailed('Java CI build must pass before merging');
              return;
            }
            
            console.log('Java CI build passed ‚úì');

      - name: Check if PR is approved
        id: check_pr
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pull_number = context.payload.pull_request
              ? context.payload.pull_request.number
              : context.payload.workflow_run.pull_requests[0].number;

            const { data: reviews } = await github.rest.pulls.listReviews({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pull_number
            });
            
            const approved = reviews.some(review => review.state === 'APPROVED');
            
            if (!approved) {
              core.setFailed('Pull request needs to be approved first');
              return;
            }
            
            console.log('PR is approved ‚úì');

      - name: Update PR status
        if: always()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const isApproved = '${{ steps.check_pr.conclusion }}' === 'success';
            const status = isApproved ? 
              '‚úÖ All checks passed successfully!' : 
              '‚ùå Not all requirements are met. Check approvals.';
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request
                ? context.payload.pull_request.number
                : context.payload.workflow_run.pull_requests[0].number,
              body: status
            });

      - name: Auto-merge if everything passes
        if: ${{ steps.check_status.conclusion == 'success' && steps.check_pr.conclusion == 'success' }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pull_number = context.payload.pull_request
              ? context.payload.pull_request.number
              : context.payload.workflow_run.pull_requests[0].number;

            try {
              await github.rest.pulls.merge({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: pull_number,
                merge_method: 'squash'
              });
              console.log('PR merged successfully! üéâ');
            } catch (error) {
              core.setFailed(`Failed to merge PR: ${error.message}`);
            }