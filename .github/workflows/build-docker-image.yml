name: Create and publish Docker images

on:
  push:
    branches:
      - daniel/compose-fix

permissions:
  contents: read
  packages: write
  id-token: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  ALL_SERVICES: '["gateway", "auth", "registry", "stone-read", "stone-write"]'

jobs:
  check-changes:
    runs-on: ubuntu-latest
    outputs:
      shared_changed: ${{ steps.changes.outputs.shared_changed }}
      services: ${{ steps.changes.outputs.services }}
      has_changes: ${{ steps.changes.outputs.has_changes }}
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Check changes
        id: changes
        run: |
          PREVIOUS_COMMIT=$(git rev-parse HEAD^)
          
          SHARED_CHANGED=$(git diff --name-only $PREVIOUS_COMMIT HEAD | grep -E "server/libraries/|server/microservices/.+/.*-feign/" || true)
          
          if [[ -n "$SHARED_CHANGED" ]]; then
            echo "shared_changed=true" >> $GITHUB_OUTPUT
            echo "services=$ALL_SERVICES" >> $GITHUB_OUTPUT
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "Shared libraries changed - will rebuild all services"
          else
            SERVICES=$(git diff --name-only $PREVIOUS_COMMIT HEAD | grep "server/microservices/" | cut -d'/' -f3 | sort -u | jq -R -s -c 'split("\n")[:-1]')
            echo "shared_changed=false" >> $GITHUB_OUTPUT
            echo "services=$SERVICES" >> $GITHUB_OUTPUT
            
            if [[ "$SERVICES" != "[]" ]]; then
              echo "has_changes=true" >> $GITHUB_OUTPUT
              echo "Services changed: $SERVICES"
            else
              echo "has_changes=false" >> $GITHUB_OUTPUT
              echo "No changes detected - workflow will be stopped"
            fi
          fi
  build-and-push:
    needs: check-changes
    if: needs.check-changes.outputs.has_changes == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    
    strategy:
      matrix:
        platform: ${{ fromJson(needs.check-changes.outputs.services) }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Log in to Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.platform }}
          tags: |
            type=raw,value=latest
            type=sha,prefix=
          labels: |
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.description=Package for ${{ matrix.platform }}
            org.opencontainers.image.licenses=MIT
            org.opencontainers.image.version=${{ github.sha }}
            org.opencontainers.image.created=${{ steps.meta.outputs.created }}
            org.opencontainers.image.revision=${{ github.sha }}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./server
          file: ./server/microservices/${{ matrix.platform }}/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.platform }}:latest
          cache-to: type=inline
          provenance: false